{"name":"JWT Authentication for WP REST API","tagline":"A simple plugin to add JSON Web Token (JWT) Authentication to WP REST API","body":"# JWT Authentication for the WP REST API\r\n\r\nA simple plugin to add [JSON Web Token (JWT)](https://tools.ietf.org/html/rfc7519) Authentication to the WP REST API.\r\n\r\nTo know more about JSON Web Tokens, please visit [http://jwt.io](http://jwt.io).\r\n\r\n## Requirements\r\n\r\n### WP REST API V2\r\n\r\nThis plugin was conceived to extend the [WP REST API V2](https://github.com/WP-API/WP-API) plugin features and, of course, was built on top of it.\r\n\r\nSo, to use the **wp-api-jwt-auth** you need to install and activate [WP REST API](https://github.com/WP-API/WP-API).\r\n\r\n### PHP\r\n\r\n**Minimum PHP version: 5.3.0**\r\n\r\n### Eable PHP HTTP Authorization Header \r\n\r\n#### Shared Hosts\r\n\r\nMost of the shared hosts have disabled the **HTTP Authorization Header** by default.\r\n\r\nTo enable this option you'll need to edit your **.htaccess** file by adding the following:\r\n\r\n```\r\nRewriteEngine on\r\nRewriteCond %{HTTP:Authorization} ^(.*)\r\nRewriteRule ^(.*) - [E=HTTP_AUTHORIZATION:%1]\r\n```\r\n\r\n#### WPEngine\r\n\r\nTo enable this option you'll need to edit your **.htaccess** file by adding the following (see https://github.com/Tmeister/wp-api-jwt-auth/issues/1):\r\n\r\n```\r\nSetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\r\n```\r\n\r\n## Installation & Configuration\r\n\r\n[Download the zip file](https://github.com/Tmeister/wp-api-jwt-auth/archive/master.zip) and install it like any other WordPress plugin.\r\n\r\nOr clone this repo into your WordPress installation into the wp-content/plugins folder.\r\n\r\n### Configurate the Secret Key\r\n\r\nThe JWT needs a **secret key** to sign the token. This **secret key** must be unique and never revealed.\r\n\r\nTo add the **secret key**, edit your wp-config.php file and add a new constant called **JWT_AUTH_SECRET_KEY**.\r\n\r\n\r\n```php\r\ndefine('JWT_AUTH_SECRET_KEY', 'your-top-secrect-key');\r\n```\r\n\r\nYou can use a string from here https://api.wordpress.org/secret-key/1.1/salt/\r\n\r\n### Configurate CORs Support\r\n\r\nThe **wp-api-jwt-auth** plugin has the option to activate [CORs](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing) support.\r\n\r\nTo enable the CORs Support edit your wp-config.php file and add a new constant called **JWT_AUTH_CORS_ENABLE**\r\n\r\n\r\n```php\r\ndefine('JWT_AUTH_CORS_ENABLE', true);\r\n```\r\n\r\n\r\nFinally activate the plugin within the plugin dashboard.\r\n\r\n## Namespace and Endpoints\r\n\r\nWhen the plugin is activated, a new namespace is added.\r\n\r\n\r\n```\r\n/jwt-auth/v1\r\n```\r\n\r\n\r\nAlso, two new endpoints are added to this namespace.\r\n\r\n\r\nEndpoint | HTTP Verb\r\n--- | ---\r\n*/wp-json/jwt-auth/v1/token* | POST\r\n*/wp-json/jwt-auth/v1/token/validate* | POST\r\n\r\n##Usage\r\n### /wp-json/jwt-auth/v1/token\r\n\r\nThis is the entry point for the JWT Authentication.\r\n\r\nValidates the user credentials, *username* and *password*, and returns a token to use in a future request to the API if the authentication is correct or error if the authentication fails.\r\n\r\n####Sample request using AngularJS\r\n\r\n```javascript\r\n\r\n( function() {\r\n  var app = angular.module( 'jwtAuth', [] );\r\n\r\n  app.controller( 'MainController', function( $scope, $http ) {\r\n\r\n    var apiHost = 'http://yourdomain.com/wp-json';\r\n\r\n    $http.post( apiHost + '/jwt-auth/v1/token', {\r\n        username: 'admin',\r\n        password: 'password'\r\n      } )\r\n\r\n      .then( function( response ) {\r\n        console.log( response.data )\r\n      } )\r\n\r\n      .catch( function( error ) {\r\n        console.error( 'Error', error.data[0] );\r\n      } );\r\n\r\n  } );\r\n\r\n} )();\r\n\r\n\r\n```\r\n\r\nSuccess response from the server:\r\n\r\n```json\r\n{\r\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9qd3QuZGV2IiwiaWF0IjoxNDM4NTcxMDUwLCJuYmYiOjE0Mzg1NzEwNTAsImV4cCI6MTQzOTE3NTg1MCwiZGF0YSI6eyJ1c2VyIjp7ImlkIjoiMSJ9fX0.YNe6AyWW4B7ZwfFE5wJ0O6qQ8QFcYizimDmBy6hCH_8\",\r\n    \"user_display_name\": \"admin\",\r\n    \"user_email\": \"admin@localhost.dev\",\r\n    \"user_nicename\": \"admin\"\r\n}\r\n```\r\n\r\nError response from the server:\r\n\r\n```json\r\n{\r\n    \"code\": \"jwt_auth_failed\",\r\n    \"data\": {\r\n        \"status\": 403\r\n    },\r\n    \"message\": \"Invalid Credentials.\"\r\n}\r\n```\r\n\r\nOnce you get the token, you must store it somewhere in your application, e.g. in a **cookie** or using **localstorage**.\r\n\r\nFrom this point, you should pass this token to every API call.\r\n\r\nSample call using the Authorization header using AngularJS:\r\n\r\n```javascript\r\napp.config( function( $httpProvider ) {\r\n  $httpProvider.interceptors.push( [ '$q', '$location', '$cookies', function( $q, $location, $cookies ) {\r\n    return {\r\n      'request': function( config ) {\r\n        config.headers = config.headers || {};\r\n        //Assume that you store the token in a cookie.\r\n        var globals = $cookies.getObject( 'globals' ) || {};\r\n        //If the cookie has the CurrentUser and the token\r\n        //add the Authorization header in each request\r\n        if ( globals.currentUser && globals.currentUser.token ) {\r\n          config.headers.Authorization = 'Bearer ' + globals.currentUser.token;\r\n        }\r\n        return config;\r\n      }\r\n    };\r\n  } ] );\r\n} );\r\n```\r\n\r\nThe **wp-api-jwt-auth** will intercept every call to the server and will look for the authorization header, if the authorization header is present, it will try to decode the token and will set the user according with the data stored in it.\r\n\r\nIf the token is valid, the API call flow will continue as always.\r\n\r\n**Sample Headers**\r\n\r\n```\r\nPOST /resource HTTP/1.1\r\nHost: server.example.com\r\nAuthorization: Bearer mF_s9.B5f-4.1JqM\r\n```\r\n\r\n###Errors\r\n\r\nIf the token is invalid an error will be returned. Here are some samples of errors:\r\n\r\n**Invalid Credentials**\r\n\r\n```json\r\n[\r\n  {\r\n    \"code\": \"jwt_auth_failed\",\r\n    \"message\": \"Invalid Credentials.\",\r\n    \"data\": {\r\n      \"status\": 403\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n**Invalid Signature**\r\n\r\n```json\r\n[\r\n  {\r\n    \"code\": \"jwt_auth_invalid_token\",\r\n    \"message\": \"Signature verification failed\",\r\n    \"data\": {\r\n      \"status\": 403\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n**Expired Token**\r\n\r\n```json\r\n[\r\n  {\r\n    \"code\": \"jwt_auth_invalid_token\",\r\n    \"message\": \"Expired token\",\r\n    \"data\": {\r\n      \"status\": 403\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n### /wp-json/jwt-auth/v1/token/validate\r\n\r\nThis is a simple helper endpoint to validate a token; you only will need to make a POST request sending the Authorization header.\r\n\r\nValid Token Response:\r\n\r\n```json\r\n{\r\n  \"code\": \"jwt_auth_valid_token\",\r\n  \"data\": {\r\n    \"status\": 200\r\n  }\r\n}\r\n```\r\n\r\n##Available Hooks\r\n\r\nThe **wp-api-jwt-auth** is dev friendly and has five filters available to override the default settings.\r\n\r\n####jwt_auth_cors_allow_headers\r\n\r\nThe **jwt_auth_cors_allow_headers** allows you to modify the available headers when the CORs support is enabled.\r\n\r\nDefault Value:\r\n\r\n```\r\n'Access-Control-Allow-Headers, Content-Type, Authorization'\r\n```\r\n\r\n###jwt_auth_not_before\r\n\r\nThe **jwt_auth_not_before** allows you to change the [**nbf**](https://tools.ietf.org/html/rfc7519#section-4.1.5) value before the token is created.\r\n\r\nDefault Value:\r\n\r\n```\r\nCreation time - time()\r\n```\r\n\r\n###jwt_auth_expire\r\n\r\nThe **jwt_auth_expire** allows you to change the value [**exp**](https://tools.ietf.org/html/rfc7519#section-4.1.4) before the token is created.\r\n\r\nDefault Value:\r\n\r\n```\r\ntime() + (DAY_IN_SECONDS * 7)\r\n```\r\n\r\n###jwt_auth_token_before_sign\r\n\r\nThe **jwt_auth_token_before_sign** allows you to modify all the token data before to be encoded and signed.\r\n\r\nDefault value:\r\n\r\n```php\r\n<?php\r\n$token = array(\r\n    'iss' => get_bloginfo('url'),\r\n    'iat' => $issuedAt,\r\n    'nbf' => $notBefore,\r\n    'exp' => $expire,\r\n    'data' => array(\r\n        'user' => array(\r\n            'id' => $user->data->ID,\r\n        )\r\n    )\r\n);\r\n```\r\n\r\n###jwt_auth_token_before_dispatch\r\nThe **jwt_auth_token_before_dispatch** allows you to modify all the response array before to dispatch it to the client.\r\n\r\nDefault value:\r\n\r\n```php\r\n<?php\r\n$data = array(\r\n    'token' => $token,\r\n    'user_email' => $user->data->user_email,\r\n    'user_nicename' => $user->data->user_nicename,\r\n    'user_display_name' => $user->data->display_name,\r\n);\r\n```\r\n\r\n## Testing\r\n\r\nSince version **1.1.0** I've added a new test suite to be sure that the basic features of this plugin do what it's expected.\r\n\r\nYou can run this test using the following command\r\n\r\n```\r\nincludes/vendor/bin/phpunit tests\r\n```\r\n\r\n![Command Line Output](https://s3.amazonaws.com/f.cl.ly/items/2o0j0a403A0N1a0r1C3H/Image%202016-02-27%20at%208.16.48%20PM.png?v=5fe1c76e)\r\n\r\nAll the tests can be found at https://github.com/Tmeister/wp-api-jwt-auth/tree/develop/tests/GeneralTest.php\r\n\r\n##Credits\r\n[WP REST API V2](http://v2.wp-api.org/)\r\n\r\n[PHP-JWT from firebase](https://github.com/firebase/php-jwt)\r\n\r\n##License\r\n[GPLv2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}